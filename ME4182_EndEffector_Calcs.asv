%% End Effector Tension Calculations
% ME 4182
% Fall 2022
% Team Snakes
clear; clc; close all; clearvars all;
%% Parameters
m_endeffector_kg = 8;
v_max_ms = 2;
a_max_ms2 = 5;
kR = 0.0254 / 2;

% Frame Dimensions
frame_length_ft = 32.8;
frame_height_ft = 14 + 31 / 12;
frame_length_m = frame_length_ft / 3.281;
frame_height_m = frame_height_ft / 3.281;

% Workspace Dimensions
workspace_length_ratio = 0.9;
workspace_height_ratio = 0.9;
workspace_length_m = frame_length_m * workspace_length_ratio;
workspace_height_m = frame_height_m * workspace_height_ratio;

% TODO: GET TENSILE STRENGTH OF CABLES BEING USED
cable_tensile_strength = 1;
min_tension_N = 7.5;
max_tension_N = 1000;
%% Define/Discretize Workspace
force_weight_N = 9.81 * [0, -m_endeffector_kg];

% Create Workspace
workspace = zeros(int64(frame_height_m), int64(frame_length_m));

% Iterate through each section of workspace and determine max tension
for i = 1:size(workspace, 1)
    for j = 1:size(workspace, 2)
        % Get offset at each point
        left_offset_m = (j - 1) + ((frame_length_m - workspace_length_m) / 2);
        right_offset_m = frame_length_m - left_offset_m;
        top_offset_m = (i - 1) + ((frame_height_m - workspace_height_m) / 2);
        bottom_offset_m = frame_height_m - top_offset_m;
        
        % Get angle at each point
        % Point 1 is bottom-left
        % Point 2 is bottom-right
        % Point 3 is top-right
        % Point 4 is top-left
        theta1_deg = atan2d(bottom_offset_m, left_offset_m);
        theta2_deg = atan2d(bottom_offset_m, -right_offset_m);
        theta3_deg = atan2d(-top_offset_m, -right_offset_m);
        theta4_deg = atan2d(-top_offset_m, left_offset_m);

        % Iterate through each angle
        current_tension_N = inf;
        tension_delta = 1000;
        for theta = 1:360
            accel_x_ms2 = a_max_ms2 * cosd(theta);
            accel_y_ms2 = a_max_ms2 * sind(theta);
            force_x_N = m_endeffector_kg * accel_x_ms2;
            force_y_N = m_endeffector_kg * (accel_y_ms2 - 9.81);

            W = -[cosd(theta1_deg), cosd(theta2_deg), cosd(theta3_), cosd(theta_4); sind(theta_1), sind(theta_2), sind(theta_3), sind(theta_4)];
            tensions_N = forceSolver(force_x_N, force_y_N, W, 0.6 / kR);
        end
        workspace(i, j) = current_tension_N;
    end
end

function [out] = forceSolver(Fx, Fy, W, midTension)
    WT = W';    
    tm = [midTension, midTension, midTension, midTension];
    Wtm = W * tm;
    Fx = Fx - Wtm(1);
    Fy = Fy - Wtm(2);
    
    WWT = W * WT;
    WWTinv = pinv(WWT);
    fWtm = [Fx, Fy];
    intermediate = WWTinv * fWtm;
    intermediate2 = WT * intermediate;
    out = tm + intermediate2;
end